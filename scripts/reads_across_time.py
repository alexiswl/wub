#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import pandas as pd

from wub.vis import report
import matplotlib.pyplot as plt
import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    import seaborn as sns
warnings.resetwarnings()
_ = sns

# Parse command line arguments:
parser = argparse.ArgumentParser(
    description="""
    Plot read and alignment properties across time.
    """)

parser.add_argument(
    '-i', metavar='time_tab', type=str, help="Tab separated file generated by fastq_time_tab.py", required=True)
parser.add_argument(
    '-a', metavar='aln_tab', type=str, help="Tab separated file generated by bam_alignment_length.py", required=True)
parser.add_argument(
    '-w', metavar='res_freq', type=float, help="Resampling frequency in minutes.", required=False, default=5)
parser.add_argument(
    '-r', metavar='report_pdf', type=str, help="Report PDF (reads_across_time.pdf).", default="reads_across_time.pdf")
parser.add_argument(
    '-t', metavar='out_tsv', type=str, help="Output tsv (reads_across_time.tsv).", default="reads_across_time.tsv")


if __name__ == '__main__':
    args = parser.parse_args()

    freq = str(args.w) + "T"

    time_tab = pd.read_csv(args.i, sep="\t", parse_dates=True)

    aln_tab = pd.read_csv(args.a, sep="\t")
    aln_tab = aln_tab.rename(columns={"read_name": "Read",  "aligned_ref_bases": "AlignedRefBases",
                                      "aligned_read_bases": "AlignedReadBases", "reference": "Reference", "mapping_quality": "MappingQuality"})
    aln_tab.drop("read_length", axis=1, inplace=True)

    tt = time_tab.copy()
    tt = tt.set_index("StartTime").sort_index()
    tt.index = pd.DatetimeIndex(tt.index)

    df = pd.merge(aln_tab, time_tab, how='inner', on=['Read'])
    df = df.set_index("StartTime").sort_index()
    df.index = pd.DatetimeIndex(df.index)

    df["AlnRatio"] = df.AlignedReadBases / df.ReadLength

    df.to_csv(args.t, sep="\t")

    plotter = report.Report(args.r)

    tt.ReadLength.resample(freq).mean().plot()
    plt.ylabel("ReadLength")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.ReadLength.resample(freq).mean().plot()
    plt.ylabel("AlignedReadLength")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.ReadLength.resample(freq).count().plot()
    plt.ylabel("ReadCount")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.AlignedReadBases.resample(freq).mean().plot()
    plt.ylabel("AlignedReadBases")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.AlignedRefBases.resample(freq).mean().plot()
    plt.ylabel("AlignedRefBases")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.AlnRatio.resample(freq).mean().plot()
    plt.ylabel("AlignedReadBases / ReadLenght")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    df.MappingQuality.resample(freq).mean().plot()
    plt.ylabel("MappingQuality")
    plotter.plt.tight_layout()
    plotter.pages.savefig()
    plotter.plt.clf()

    plotter.close()
